// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package github

import (
	"context"
	"github.com/rs/zerolog"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked Repository
//		mockedRepository := &RepositoryMock{
//			DirectoryFunc: func() string {
//				panic("mock out the Directory method")
//			},
//			GetFilesChangedSinceFunc: func(sha string) ([]string, error) {
//				panic("mock out the GetFilesChangedSince method")
//			},
//			GetHeadShaFunc: func() (string, error) {
//				panic("mock out the GetHeadSha method")
//			},
//			GetMetadataFunc: func() RepoMetadata {
//				panic("mock out the GetMetadata method")
//			},
//			PullFunc: func(ctx context.Context) error {
//				panic("mock out the Pull method")
//			},
//			WithLoggerFunc: func(logger zerolog.Logger) Repository {
//				panic("mock out the WithLogger method")
//			},
//		}
//
//		// use mockedRepository in code that requires Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// DirectoryFunc mocks the Directory method.
	DirectoryFunc func() string

	// GetFilesChangedSinceFunc mocks the GetFilesChangedSince method.
	GetFilesChangedSinceFunc func(sha string) ([]string, error)

	// GetHeadShaFunc mocks the GetHeadSha method.
	GetHeadShaFunc func() (string, error)

	// GetMetadataFunc mocks the GetMetadata method.
	GetMetadataFunc func() RepoMetadata

	// PullFunc mocks the Pull method.
	PullFunc func(ctx context.Context) error

	// WithLoggerFunc mocks the WithLogger method.
	WithLoggerFunc func(logger zerolog.Logger) Repository

	// calls tracks calls to the methods.
	calls struct {
		// Directory holds details about calls to the Directory method.
		Directory []struct {
		}
		// GetFilesChangedSince holds details about calls to the GetFilesChangedSince method.
		GetFilesChangedSince []struct {
			// Sha is the sha argument value.
			Sha string
		}
		// GetHeadSha holds details about calls to the GetHeadSha method.
		GetHeadSha []struct {
		}
		// GetMetadata holds details about calls to the GetMetadata method.
		GetMetadata []struct {
		}
		// Pull holds details about calls to the Pull method.
		Pull []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// WithLogger holds details about calls to the WithLogger method.
		WithLogger []struct {
			// Logger is the logger argument value.
			Logger zerolog.Logger
		}
	}
	lockDirectory            sync.RWMutex
	lockGetFilesChangedSince sync.RWMutex
	lockGetHeadSha           sync.RWMutex
	lockGetMetadata          sync.RWMutex
	lockPull                 sync.RWMutex
	lockWithLogger           sync.RWMutex
}

// Directory calls DirectoryFunc.
func (mock *RepositoryMock) Directory() string {
	if mock.DirectoryFunc == nil {
		panic("RepositoryMock.DirectoryFunc: method is nil but Repository.Directory was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDirectory.Lock()
	mock.calls.Directory = append(mock.calls.Directory, callInfo)
	mock.lockDirectory.Unlock()
	return mock.DirectoryFunc()
}

// DirectoryCalls gets all the calls that were made to Directory.
// Check the length with:
//
//	len(mockedRepository.DirectoryCalls())
func (mock *RepositoryMock) DirectoryCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockDirectory.RLock()
	calls = mock.calls.Directory
	mock.lockDirectory.RUnlock()
	return calls
}

// GetFilesChangedSince calls GetFilesChangedSinceFunc.
func (mock *RepositoryMock) GetFilesChangedSince(sha string) ([]string, error) {
	if mock.GetFilesChangedSinceFunc == nil {
		panic("RepositoryMock.GetFilesChangedSinceFunc: method is nil but Repository.GetFilesChangedSince was just called")
	}
	callInfo := struct {
		Sha string
	}{
		Sha: sha,
	}
	mock.lockGetFilesChangedSince.Lock()
	mock.calls.GetFilesChangedSince = append(mock.calls.GetFilesChangedSince, callInfo)
	mock.lockGetFilesChangedSince.Unlock()
	return mock.GetFilesChangedSinceFunc(sha)
}

// GetFilesChangedSinceCalls gets all the calls that were made to GetFilesChangedSince.
// Check the length with:
//
//	len(mockedRepository.GetFilesChangedSinceCalls())
func (mock *RepositoryMock) GetFilesChangedSinceCalls() []struct {
	Sha string
} {
	var calls []struct {
		Sha string
	}
	mock.lockGetFilesChangedSince.RLock()
	calls = mock.calls.GetFilesChangedSince
	mock.lockGetFilesChangedSince.RUnlock()
	return calls
}

// GetHeadSha calls GetHeadShaFunc.
func (mock *RepositoryMock) GetHeadSha() (string, error) {
	if mock.GetHeadShaFunc == nil {
		panic("RepositoryMock.GetHeadShaFunc: method is nil but Repository.GetHeadSha was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetHeadSha.Lock()
	mock.calls.GetHeadSha = append(mock.calls.GetHeadSha, callInfo)
	mock.lockGetHeadSha.Unlock()
	return mock.GetHeadShaFunc()
}

// GetHeadShaCalls gets all the calls that were made to GetHeadSha.
// Check the length with:
//
//	len(mockedRepository.GetHeadShaCalls())
func (mock *RepositoryMock) GetHeadShaCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetHeadSha.RLock()
	calls = mock.calls.GetHeadSha
	mock.lockGetHeadSha.RUnlock()
	return calls
}

// GetMetadata calls GetMetadataFunc.
func (mock *RepositoryMock) GetMetadata() RepoMetadata {
	if mock.GetMetadataFunc == nil {
		panic("RepositoryMock.GetMetadataFunc: method is nil but Repository.GetMetadata was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetMetadata.Lock()
	mock.calls.GetMetadata = append(mock.calls.GetMetadata, callInfo)
	mock.lockGetMetadata.Unlock()
	return mock.GetMetadataFunc()
}

// GetMetadataCalls gets all the calls that were made to GetMetadata.
// Check the length with:
//
//	len(mockedRepository.GetMetadataCalls())
func (mock *RepositoryMock) GetMetadataCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetMetadata.RLock()
	calls = mock.calls.GetMetadata
	mock.lockGetMetadata.RUnlock()
	return calls
}

// Pull calls PullFunc.
func (mock *RepositoryMock) Pull(ctx context.Context) error {
	if mock.PullFunc == nil {
		panic("RepositoryMock.PullFunc: method is nil but Repository.Pull was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockPull.Lock()
	mock.calls.Pull = append(mock.calls.Pull, callInfo)
	mock.lockPull.Unlock()
	return mock.PullFunc(ctx)
}

// PullCalls gets all the calls that were made to Pull.
// Check the length with:
//
//	len(mockedRepository.PullCalls())
func (mock *RepositoryMock) PullCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockPull.RLock()
	calls = mock.calls.Pull
	mock.lockPull.RUnlock()
	return calls
}

// WithLogger calls WithLoggerFunc.
func (mock *RepositoryMock) WithLogger(logger zerolog.Logger) Repository {
	if mock.WithLoggerFunc == nil {
		panic("RepositoryMock.WithLoggerFunc: method is nil but Repository.WithLogger was just called")
	}
	callInfo := struct {
		Logger zerolog.Logger
	}{
		Logger: logger,
	}
	mock.lockWithLogger.Lock()
	mock.calls.WithLogger = append(mock.calls.WithLogger, callInfo)
	mock.lockWithLogger.Unlock()
	return mock.WithLoggerFunc(logger)
}

// WithLoggerCalls gets all the calls that were made to WithLogger.
// Check the length with:
//
//	len(mockedRepository.WithLoggerCalls())
func (mock *RepositoryMock) WithLoggerCalls() []struct {
	Logger zerolog.Logger
} {
	var calls []struct {
		Logger zerolog.Logger
	}
	mock.lockWithLogger.RLock()
	calls = mock.calls.WithLogger
	mock.lockWithLogger.RUnlock()
	return calls
}
